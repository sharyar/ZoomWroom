package com.example.zoomwroom.Entities;

import com.example.zoomwroom.database.MyDataBase;
import com.google.android.gms.maps.model.LatLng;

import java.io.Serializable;
import java.util.Date;

/**
 * DriveRequest
 *
 * A DriveRequest stores its requestID, both Rider and Driver's userID, pickup and destination
 * locations, datetime created, suggestedFare generated by the system and offeredFare offered by
 * the rider, and the current status of the request.
 *
 * There are also 4 instance variables of type double just for firebase storing.
 *
 * @version 1.1
 * @author Dulong Sang
 */
public class DriveRequest implements Serializable {

    //<editor-fold desc="Status">
    /**
     * Status values:
     * PENDING      Indicate that the request has been posted and waiting for a driver to accept.
     * ACCEPTED     Indicate that the request is accepted by a driver and the driver is waiting for the rider to confirm.
     * CONFIRMED    Indicate that the rider has confirmed the ride and waiting for being picked up.
     * ONGOING      Indicate that the driver has picked up the rider and is driving to the destination.
     * COMPLETED    Indicate that this request is finished.
     * CANCELLED    Indicate that the rider canceled this request before any driver accepts it.
     * ABORTED      Indicate that the rider has already started his/her riding but want to stop this riding.
     *
     * @see <a href="https://github.com/CMPUT301W20T29-H03/ZoomWroom/wiki/App-Terminologies#status">Status Description</a>
     */
    public static final class Status {
        public static final int CREATE      = -1;   // temporary status only use locally
        public static final int PENDING     = 0;
        public static final int ACCEPTED    = 1;
        public static final int CONFIRMED   = 2;
        public static final int ONGOING     = 3;
        public static final int COMPLETED   = 4;
        public static final int CANCELLED   = 5;
        public static final int DECLINED    = 6;
        public static final int ABORTED     = 7;
        public static final int FINALIZED = 8;
    }
    //</editor-fold>

    private String requestID;
    private String riderID;
    private String driverID;
    private LatLng pickupLocation;
    private LatLng destination;
    private String pickupLocationName;
    private String destinationName;
    private Date requestDateTime;
    private float suggestedFare;
    private float offeredFare;
    private int status;

    // only for firebase
    private double pickupLocationLat;
    private double pickupLocationLng;
    private double destinationLat;
    private double destinationLng;

    /**
     * Default constructor, create an empty DriveRequest
     */
    public DriveRequest() {
        requestDateTime = new Date();
        status = Status.PENDING;
    }

    /**
     * @param riderID
     */
    public DriveRequest(String riderID) {
        this();
        this.riderID = riderID;
    }

    /**
     * @param riderID
     * @param pickupLocation
     * @param destination
     */
    public DriveRequest(String riderID, LatLng pickupLocation, LatLng destination) {
        this(riderID);
        this.pickupLocation = pickupLocation;
        this.destination = destination;
    }

    //<editor-fold desc="getter & setter">
    public String getRequestID() {
        return requestID;
    }

    public void setRequestID(String requestID) {
        this.requestID = requestID;
    }

    public String getRiderID() {
        return riderID;
    }

    public void setRiderID(String riderID) {
        this.riderID = riderID;
    }

    public String getDriverID() {
        return driverID;
    }

    public void setDriverID(String driverId) {
        this.driverID = driverId;
    }

    public LatLng getPickupLocation() {
        return pickupLocation;
    }

    public void setPickupLocation(LatLng pickupLocation) {
        this.pickupLocation = pickupLocation;
    }

    public LatLng getDestination() {
        return destination;
    }

    public void setDestination(LatLng destination) {
        this.destination = destination;
    }

    public Date getRequestDateTime() {
        return requestDateTime;
    }

    public void setRequestDateTime(Date requestDateTime) {
        this.requestDateTime = requestDateTime;
    }

    public float getSuggestedFare() {
        return suggestedFare;
    }

    public void setSuggestedFare(float suggestedFare) {
        this.suggestedFare = suggestedFare;
    }

    public float getOfferedFare() {
        return offeredFare;
    }

    public void setOfferedFare(float offeredFare) {
        this.offeredFare = offeredFare;
    }

    public int getStatus() {
        return status;
    }

    /**
     * @param status    status value
     * @throws IllegalArgumentException if pass invalid status value
     * @see DriveRequest.Status
     */
    public void setStatus(int status) {
        this.status = status;
    }

    public double getPickupLocationLat() {
        return pickupLocationLat;
    }

    public void setPickupLocationLat(double pickupLocationLat) {
        this.pickupLocationLat = pickupLocationLat;
    }

    public double getPickupLocationLng() {
        return pickupLocationLng;
    }

    public void setPickupLocationLng(double pickupLocationLng) {
        this.pickupLocationLng = pickupLocationLng;
    }

    public double getDestinationLat() {
        return destinationLat;
    }

    public void setDestinationLat(double destinationLat) {
        this.destinationLat = destinationLat;
    }

    public double getDestinationLng() {
        return destinationLng;
    }

    public void setDestinationLng(double destinationLng) {
        this.destinationLng = destinationLng;
    }
    //</editor-fold>

    /**
     * @return a String that contains rider and driver's userID, and the final fare
     */
    public String toQRBucksString() {
        return String.format("%s-%s-%f", MyDataBase.getInstance().getRider(riderID).getName(), requestID, offeredFare);
    }

    public String getPickupLocationName() {
        return pickupLocationName;
    }

    public void setPickupLocationName(String pickupLocationName) {
        this.pickupLocationName = pickupLocationName;
    }

    public String getDestinationName() {
        return destinationName;
    }

    public void setDestinationName(String destinationName) {
        this.destinationName = destinationName;
    }

    /**
     * call this method before upload to firebase!
     *
     * Since there is no empty constructor, getters and setters in LatLng class, we have to change
     * a way to storing LatLng objects.
     * In this method, it will set both pickupLocation and destination to null, and set their values
     * to 4 attributes of type double, so that the DriveRequest object can be stored in firebase.
     */
    public void toFirebaseMode() {
        if (pickupLocation != null) {
            pickupLocationLat = pickupLocation.latitude;
            pickupLocationLng = pickupLocation.longitude;
            pickupLocation = null;
        }
        if (destination != null) {
            destinationLat = destination.latitude;
            destinationLng = destination.longitude;
            destination = null;
        }
    }

    /**
     * call this method after download from firebase!
     *
     * This method restore pickupLocation and destination attributes.
     */
    public void toLocalMode() {
        pickupLocation = new LatLng(pickupLocationLat, pickupLocationLng);
        destination = new LatLng(destinationLat, destinationLng);
    }

    /**
     * Converts the int status to a string for display throughout the application.
     * Status 0 returns Accepted
     * Status 1 returns Accepted
     * Status 2 returns Confirmed
     * Status 3 returns Ongoing
     * Status 4 returns Completed
     * Status 5 returns Cancelled
     * Status 6 returns Declined
     * Status 7 returns Aborted
     * Status 8 returns FINALIZED
     *
     * @param status    int representing current status of the DriveRequest
     * @return          String representing the status in a readable format
     */
    public static String giveStatus(int status) {
        String strStatus;

        switch (status) {
            case 0:
                strStatus = "Pending";
                break;
            case 1:
                strStatus = "Accepted";
                break;
            case 2:
                strStatus = "Confirmed";
                break;
            case 3:
                strStatus = "Ongoing";
                break;
            case 4:
                strStatus = "Completed";
                break;
            case 5:
                strStatus = "Cancelled";
                break;
            case 6:
                strStatus = "Declined";
                break;
            case 7:
                strStatus = "Aborted";
                break;
            case 8:
                strStatus = "Finalized";
                break;
            default:
                strStatus = "Unknown";
        }

        return strStatus;
    }
}
